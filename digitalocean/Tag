import digitalocean
from digitalocean.baseapi import BaseAPI


class Tags(BaseAPI):
    def __init__(self, *args, **kwargs):
        self.name = ""
        self.resources = {}
        super().__init__(*args, **kwargs)

    @classmethod
    def get_object(cls, api_token, tag_name):
        tag = cls(token=api_token, name=tag_name)
        tag.load()
        return tag

    def load(self):
        """
           Fetch data about tag - use this instead of get_data()
        """
        tags = self.get_data("tags/%s" % self.name)
        tag = tags['tag']

        for attr in tag.keys():
            setattr(self, attr, tag[attr])

        return self

    def create(self, **kwargs):
        """
            Create the tag.
        """
        for attr in kwargs.keys():
            setattr(self, attr, kwargs[attr])

        data = {
            "name": self.name,
        }

        data = self.get_data("tags/", type="POST", params=data)
        if data:
            self.name = data['tag']['name']
            self.resources = data['tag']['resources']

    def load_or_create(self, **kwargs):
        """
            Load or create the tag.
        """
        for attr in kwargs.keys():
            setattr(self, attr, kwargs[attr])

        try:
            self.load()
        except digitalocean.DataReadError:
            self.create()
